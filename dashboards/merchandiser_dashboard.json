{
  "version": "1.0",
  "displayName": "Merchandiser Analytics",
  "description": "Comprehensive dashboard for merchandisers to analyze product performance, category trends, pricing optimization, and promotional effectiveness.",
  "tags": ["retail", "merchandiser", "product-performance", "pricing", "promotions"],

  "parameters": [
    {
      "name": "category_filter",
      "displayName": "Category",
      "type": "text",
      "defaultValue": "All"
    },
    {
      "name": "brand_filter",
      "displayName": "Brand",
      "type": "text",
      "defaultValue": "All"
    },
    {
      "name": "time_period",
      "displayName": "Time Period",
      "type": "text",
      "defaultValue": "90"
    }
  ],

  "layout": {
    "widgets": [
      {
        "id": "category-overview",
        "title": "Category Performance Overview",
        "type": "table",
        "position": {"x": 0, "y": 0, "width": 12, "height": 6},
        "query": {
          "sql": "SELECT c.category_name, pc.category_name as department_name, COUNT(DISTINCT p.product_id) as total_products, COUNT(DISTINCT CASE WHEN pp.performance_category = 'TOP_PERFORMER' THEN p.product_id END) as top_performers, SUM(pp.total_revenue) as category_revenue, AVG(pp.margin_percentage) as avg_margin_percent, SUM(pp.total_units_sold) as total_units_sold, AVG(pp.avg_days_on_hand) as avg_inventory_days FROM categories c LEFT JOIN categories pc ON c.parent_category_id = pc.category_id JOIN products p ON c.category_id = p.category_id LEFT JOIN product_performance pp ON p.product_id = pp.product_id WHERE c.category_level = 2 GROUP BY c.category_name, pc.category_name ORDER BY category_revenue DESC"
        },
        "visualizations": {
          "type": "table",
          "columns": ["category_name", "department_name", "total_products", "top_performers", "category_revenue", "avg_margin_percent", "avg_inventory_days"],
          "conditionalFormatting": [
            {
              "column": "avg_margin_percent",
              "condition": "> 40",
              "format": {"backgroundColor": "#4CAF50", "color": "white"}
            },
            {
              "column": "avg_inventory_days",
              "condition": "> 60",
              "format": {"backgroundColor": "#FF9800", "color": "white"}
            }
          ]
        }
      },

      {
        "id": "product-performance-matrix",
        "title": "Product Performance Matrix",
        "type": "chart",
        "position": {"x": 0, "y": 6, "width": 8, "height": 8},
        "query": {
          "sql": "SELECT pp.product_name, pp.total_revenue, pp.margin_percentage, pp.total_units_sold, pp.performance_category, CASE WHEN pp.margin_percentage > 40 THEN 'High Margin' WHEN pp.margin_percentage > 25 THEN 'Medium Margin' ELSE 'Low Margin' END as margin_tier FROM product_performance pp WHERE pp.total_revenue > 1000 ORDER BY pp.total_revenue DESC LIMIT 100"
        },
        "visualizations": {
          "type": "scatter",
          "xAxis": "total_revenue",
          "yAxis": "margin_percentage",
          "size": "total_units_sold",
          "color": "performance_category",
          "tooltip": ["product_name", "total_revenue", "margin_percentage", "total_units_sold"]
        }
      },

      {
        "id": "top-performers",
        "title": "Top 10 Performing Products",
        "type": "table",
        "position": {"x": 8, "y": 6, "width": 4, "height": 8},
        "query": {
          "sql": "SELECT ps.sku, ps.product_name, ps.category_name, ps.brand, ps.total_revenue, ps.margin_percentage, ps.performance_category, ps.category_rank FROM (SELECT pp.*, ROW_NUMBER() OVER (PARTITION BY pp.category_id ORDER BY pp.total_revenue DESC) as category_rank FROM product_performance pp) ps WHERE ps.category_rank <= 3 ORDER BY ps.total_revenue DESC LIMIT 10"
        },
        "visualizations": {
          "type": "table",
          "columns": ["product_name", "brand", "category_name", "total_revenue", "margin_percentage", "performance_category"]
        }
      },

      {
        "id": "seasonal-trends",
        "title": "Seasonal Sales Trends",
        "type": "chart",
        "position": {"x": 0, "y": 14, "width": 12, "height": 6},
        "query": {
          "sql": "SELECT DATE_TRUNC('month', s.sale_date) as sales_month, c.category_name, p.season, SUM(s.total_amount) as monthly_revenue, SUM(s.quantity) as monthly_units FROM sales s JOIN products p ON s.product_id = p.product_id JOIN categories c ON p.category_id = c.category_id WHERE s.sale_date >= CURRENT_DATE() - INTERVAL 12 MONTHS AND c.category_level = 2 GROUP BY DATE_TRUNC('month', s.sale_date), c.category_name, p.season ORDER BY sales_month DESC"
        },
        "visualizations": {
          "type": "line",
          "xAxis": "sales_month",
          "yAxis": ["monthly_revenue"],
          "series": ["category_name"],
          "groupBy": "category_name"
        }
      },

      {
        "id": "pricing-analysis",
        "title": "Pricing Analysis & Optimization",
        "type": "table",
        "position": {"x": 0, "y": 20, "width": 8, "height": 8},
        "query": {
          "sql": "WITH price_analysis AS (SELECT p.sku, p.product_name, p.retail_price, AVG(s.total_amount / s.quantity) as avg_selling_price, p.retail_price - AVG(s.total_amount / s.quantity) as price_variance, SUM(s.quantity) as total_units_sold, SUM(CASE WHEN s.discount_amount > 0 THEN s.quantity ELSE 0 END) / SUM(s.quantity) * 100 as discount_rate FROM products p JOIN sales s ON p.product_id = s.product_id WHERE s.sale_date >= CURRENT_DATE() - INTERVAL 90 DAYS GROUP BY p.sku, p.product_name, p.retail_price) SELECT sku, product_name, retail_price, avg_selling_price, price_variance, total_units_sold, discount_rate, CASE WHEN avg_selling_price > retail_price * 1.05 THEN 'Underpriced' WHEN avg_selling_price < retail_price * 0.95 THEN 'Overpriced' ELSE 'Optimal' END as pricing_recommendation FROM price_analysis ORDER BY total_units_sold DESC LIMIT 20"
        },
        "visualizations": {
          "type": "table",
          "columns": ["product_name", "retail_price", "avg_selling_price", "price_variance", "discount_rate", "pricing_recommendation"],
          "conditionalFormatting": [
            {
              "column": "pricing_recommendation",
              "condition": "Underpriced",
              "format": {"backgroundColor": "#2196F3", "color": "white"}
            },
            {
              "column": "pricing_recommendation",
              "condition": "Overpriced",
              "format": {"backgroundColor": "#FF5722", "color": "white"}
            }
          ]
        }
      },

      {
        "id": "promotional-effectiveness",
        "title": "Promotional Effectiveness",
        "type": "chart",
        "position": {"x": 8, "y": 20, "width": 4, "height": 8},
        "query": {
          "sql": "SELECT pp.promotion_name, pp.promotion_type, pp.performance_rating, pp.promotion_revenue, pp.total_discount_given, pp.promotion_revenue / pp.promotion_transactions as avg_transaction, CASE WHEN pp.total_discount_given > 0 THEN (pp.incremental_daily_revenue * pp.promotion_duration_days) / pp.total_discount_given ELSE 0 END as promotion_roi FROM promotional_performance pp WHERE pp.start_date >= CURRENT_DATE() - INTERVAL 365 DAYS ORDER BY promotion_roi DESC LIMIT 15"
        },
        "visualizations": {
          "type": "bar",
          "xAxis": "promotion_name",
          "yAxis": ["promotion_roi"],
          "series": ["promotion_roi"],
          "color": "performance_rating"
        }
      },

      {
        "id": "new-product-performance",
        "title": "New Product Launch Performance",
        "type": "table",
        "position": {"x": 0, "y": 28, "width": 8, "height": 6},
        "query": {
          "sql": "SELECT p.sku, p.product_name, p.category_name, p.brand, p.launch_date, DATEDIFF(CURRENT_DATE(), p.launch_date) as days_since_launch, COALESCE(pp.total_revenue, 0) as revenue, COALESCE(pp.stores_sold_in, 0) as store_penetration, CASE WHEN p.launch_date <= CURRENT_DATE() - INTERVAL 90 DAYS THEN CASE WHEN COALESCE(pp.total_revenue, 0) > 10000 THEN 'Successful Launch' WHEN COALESCE(pp.total_revenue, 0) > 5000 THEN 'Moderate Success' WHEN COALESCE(pp.total_revenue, 0) > 1000 THEN 'Slow Start' ELSE 'Poor Performance' END ELSE 'Too Early to Assess' END as launch_performance FROM products p LEFT JOIN product_performance pp ON p.product_id = pp.product_id WHERE p.launch_date >= CURRENT_DATE() - INTERVAL 365 DAYS ORDER BY p.launch_date DESC LIMIT 20"
        },
        "visualizations": {
          "type": "table",
          "columns": ["product_name", "brand", "launch_date", "days_since_launch", "revenue", "store_penetration", "launch_performance"]
        }
      },

      {
        "id": "inventory-turnover",
        "title": "Inventory Turnover by Category",
        "type": "chart",
        "position": {"x": 8, "y": 28, "width": 4, "height": 6},
        "query": {
          "sql": "SELECT c.category_name, AVG(COALESCE(pp.avg_days_on_hand, 0)) as avg_days_on_hand, COUNT(CASE WHEN pp.avg_days_on_hand > 60 THEN 1 END) as slow_moving_products, COUNT(CASE WHEN pp.days_since_last_sale > 90 THEN 1 END) as dead_stock_products, CASE WHEN AVG(COALESCE(pp.avg_days_on_hand, 0)) > 60 THEN 'Overstocked' WHEN AVG(COALESCE(pp.avg_days_on_hand, 0)) > 30 THEN 'Normal' ELSE 'Understocked' END as inventory_status FROM categories c JOIN products p ON c.category_id = p.category_id LEFT JOIN product_performance pp ON p.product_id = pp.product_id WHERE c.category_level = 2 GROUP BY c.category_name ORDER BY avg_days_on_hand DESC"
        },
        "visualizations": {
          "type": "bar",
          "xAxis": "category_name",
          "yAxis": ["avg_days_on_hand"],
          "series": ["avg_days_on_hand"],
          "color": "inventory_status"
        }
      },

      {
        "id": "cross-category-analysis",
        "title": "Cross-Category Purchase Patterns",
        "type": "chart",
        "position": {"x": 0, "y": 34, "width": 8, "height": 6},
        "query": {
          "sql": "WITH category_combinations AS (SELECT s1.transaction_id, c1.category_name as category1, c2.category_name as category2 FROM sales s1 JOIN sales s2 ON s1.transaction_id = s2.transaction_id AND s1.product_id != s2.product_id JOIN products p1 ON s1.product_id = p1.product_id JOIN products p2 ON s2.product_id = p2.product_id JOIN categories c1 ON p1.category_id = c1.category_id JOIN categories c2 ON p2.category_id = c2.category_id WHERE s1.sale_date >= CURRENT_DATE() - INTERVAL 90 DAYS AND c1.category_level = 2 AND c2.category_level = 2 AND c1.category_name < c2.category_name) SELECT category1, category2, COUNT(*) as co_purchase_frequency, CASE WHEN COUNT(*) > 100 THEN 'Strong Affinity' WHEN COUNT(*) > 50 THEN 'Moderate Affinity' ELSE 'Weak Affinity' END as affinity_strength FROM category_combinations GROUP BY category1, category2 HAVING COUNT(*) >= 10 ORDER BY co_purchase_frequency DESC LIMIT 15"
        },
        "visualizations": {
          "type": "heatmap",
          "xAxis": "category1",
          "yAxis": "category2",
          "value": "co_purchase_frequency",
          "color": "affinity_strength"
        }
      },

      {
        "id": "markdown-candidates",
        "title": "Markdown & Clearance Candidates",
        "type": "table",
        "position": {"x": 8, "y": 34, "width": 4, "height": 6},
        "query": {
          "sql": "SELECT p.sku, p.product_name, c.category_name, p.retail_price, COALESCE(pp.current_inventory, 0) as current_inventory, COALESCE(pp.avg_days_on_hand, 0) as days_on_hand, COALESCE(pp.days_since_last_sale, 0) as days_since_last_sale, CASE WHEN pp.days_since_last_sale > 90 AND pp.current_inventory > 10 THEN 'Immediate Clearance' WHEN pp.avg_days_on_hand > 120 THEN 'Heavy Markdown Needed' WHEN pp.avg_days_on_hand > 90 THEN 'Markdown Candidate' ELSE 'Monitor' END as markdown_recommendation FROM products p JOIN categories c ON p.category_id = c.category_id LEFT JOIN product_performance pp ON p.product_id = pp.product_id WHERE p.is_active = true AND (pp.avg_days_on_hand > 60 OR pp.days_since_last_sale > 60) ORDER BY CASE WHEN pp.days_since_last_sale > 90 THEN 1 WHEN pp.avg_days_on_hand > 120 THEN 2 ELSE 3 END LIMIT 20"
        },
        "visualizations": {
          "type": "table",
          "columns": ["product_name", "category_name", "retail_price", "current_inventory", "days_on_hand", "markdown_recommendation"],
          "conditionalFormatting": [
            {
              "column": "markdown_recommendation",
              "condition": "Immediate Clearance",
              "format": {"backgroundColor": "#F44336", "color": "white"}
            },
            {
              "column": "markdown_recommendation",
              "condition": "Heavy Markdown Needed",
              "format": {"backgroundColor": "#FF9800", "color": "white"}
            }
          ]
        }
      }
    ]
  },

  "filters": [
    {
      "name": "category_filter",
      "column": "category_name",
      "type": "dropdown",
      "multiSelect": true,
      "defaultValue": ["All"]
    },
    {
      "name": "brand_filter",
      "column": "brand",
      "type": "dropdown",
      "multiSelect": true,
      "defaultValue": ["All"]
    },
    {
      "name": "performance_filter",
      "column": "performance_category",
      "type": "dropdown",
      "multiSelect": true,
      "defaultValue": ["All"]
    },
    {
      "name": "date_range_filter",
      "column": "sale_date",
      "type": "date_range",
      "defaultValue": "last_90_days"
    }
  ],

  "schedules": [
    {
      "name": "daily_refresh",
      "cron": "0 8 * * *",
      "timezone": "America/Los_Angeles"
    },
    {
      "name": "weekly_deep_refresh",
      "cron": "0 6 * * 1",
      "timezone": "America/Los_Angeles"
    }
  ],

  "alerts": [
    {
      "name": "poor_product_performance",
      "condition": "COUNT(poor_performers) > 10",
      "recipients": ["merchandising@retailer.com"],
      "message": "{{ poor_performers }} products are underperforming and may need attention"
    },
    {
      "name": "high_inventory_days",
      "condition": "avg_inventory_days > 90",
      "recipients": ["merchandising@retailer.com", "inventory@retailer.com"],
      "message": "Category {{ category_name }} has high inventory days ({{ avg_inventory_days }})"
    },
    {
      "name": "markdown_candidates",
      "condition": "COUNT(markdown_candidates) > 50",
      "recipients": ["merchandising@retailer.com"],
      "message": "{{ markdown_candidates }} products are candidates for markdown/clearance"
    }
  ],

  "permissions": {
    "view": ["merchandisers", "category_managers", "buyers", "retail_analysts"],
    "edit": ["merchandisers", "category_managers", "retail_analysts"],
    "admin": ["retail_analysts"]
  },

  "genie": {
    "enabled": true,
    "context": "This dashboard provides merchandising analytics including product performance, pricing analysis, promotional effectiveness, seasonal trends, and inventory management insights.",
    "suggestedQueries": [
      "Which products are underperforming in sales?",
      "What categories have the highest margins?",
      "Which promotions had the best ROI?",
      "What products need markdown or clearance?",
      "How are new product launches performing?",
      "Which categories are overstocked?",
      "What are the top cross-selling opportunities?",
      "Which products are trending up in sales?",
      "What seasonal patterns do we see?",
      "Which brands are performing best?"
    ]
  }
}